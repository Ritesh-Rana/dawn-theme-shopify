<script>
{% assign proqty = 0 %}
  {% for item in cart.items %}
    {% if item.variant.id == 44979149275425 %}
        {% assign proqty = item.quantity %}
        {% break %}
    {% endif %}
  {% endfor %}
  {% assign free_gift_over_price_30 = 100 %}
  {% assign variant_id = '44979149275425' %}

  function formatmoney(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};

  var carttotalint = 0;
  var proqty = 0;
  
  $('input[type=number]').change(function() {
    var updateproductline = $(this).attr("data-quantity-variant-id");
    var updateproductqty = $(this).val();
    
    fetch('/cart/update.js', {
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        updates: {
          [updateproductline]: updateproductqty
        }
      })
    }).then(() => {
      return new Promise((resolve, reject) => {
        jQuery.getJSON('/cart.js', function(cart) {
          carttotalint = cart.total_price;
          cart.items.forEach(item => {
            if (item.variant_id == 44979149275425) {
              proqty = item.quantity;
            }
          });
          resolve();
        });
      });
    }).then(() => {
      var money_format= {{ shop.money_format }};
      carttotalint = formatmoney(carttotalint, money_format );
      console.log("carttotalint: " + carttotalint);
      console.log("proqty: " + proqty);
      if (carttotalint >= 100 && proqty == 0) {
        fetch('/cart/update.js', {
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            updates: {
              44979149275425: 1
            }
          })
        });
      } else if (carttotalint < 100 || proqty > 1) {
        fetch('/cart/update.js', {
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            updates: {
              44979149275425: 0
            }
          })
        })
      }
    });
  });
  
</script>