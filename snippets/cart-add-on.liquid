<script>
{% assign proqty = 0 %}
  {% for item in cart.items %}
    {% if item.variant.id == 44979149275425 %}
        {% assign proqty = item.quantity %}
        {% break %}
    {% endif %}
  {% endfor %}
  {% assign free_gift_over_price_30 = 100 %}
  {% assign variant_id = '44979149275425' %}
  function formatmoney(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};

  
// define a debounce function
function debounce(func, wait, immediate) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

// define the function to be debounced
function updateCart() {
  var carttotalint = 0;
  var proqty = 0;
  var updateproductline = $(this).attr("data-quantity-variant-id");
  var updateproductqty = $(this).val();
  var shippingleft=0;
  fetch('/cart/update.js', {
    method: "POST",
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      updates: {
        [updateproductline]: updateproductqty
      }
    })
  }).then(() => {
    return new Promise((resolve, reject) => {
      jQuery.getJSON('/cart.js', function(cart) {
        carttotalint = cart.total_price;
        cart.items.forEach(item => {
          if (item.variant_id == 44979149275425) {
            proqty = item.quantity;
          }
          var moformat= "{{ shop.money_format }}";
          var itemstotal = formatmoney(item.price, moformat );
          $('tr[variant-id='+ item.variant_id +'] td.cart-item__totals.right.medium-hide.large-up-hide').find('div.cart-item__price-wrapper').text(itemstotal);
        });
        resolve();
      });
    });
  }).then(() => {
    var moformat= "{{ shop.money_format }}";
    carttotalint = formatmoney(carttotalint, moformat );
    $('.totals__subtotal-value').text(carttotalint);
    carttotalint = parseFloat(carttotalint.match(/(\d+\.\d+)/)[1]);
    console.log("carttotalint: " + carttotalint);
    console.log("proqty: " + proqty);
    var shippingleft=75-carttotalint;
    if(carttotalint >= 75)
      $("#notification-free").text("You got free shipping");
    else
      $("#notification-free").text(shippingleft +" away from free shipping")
    if (carttotalint >= 100 && proqty == 0) {
      fetch('/cart/update.js', {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          updates: {
            44979149275425: 1
          }
        })
      }).then(()=>{
        addTdelement();
      });
    } else if (carttotalint < 100 || proqty > 1) {
      fetch('/cart/update.js', {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          updates: {
            44979149275425: 0
          }
        })
      }).then(()=>{
        $("#freeproduct").remove();
        $("table tr[variant-id='44979149275425']").remove();
        proqty=0;
      })
    }
  });
}

// use debounce on the change event
$('input[type=number]').change(debounce(updateCart, 500));
$(document).ready(updateCart);

  
function addTdelement(){
    var table =$('cart-items');
    const $newRow = $("<tr class='cart-item' id='freeproduct'>");
    const $cell1 = $('<td class="cart-item__media"><a href="/products/small-tv?variant=44979149275425" class="cart-item__link" aria-hidden="true"></a><div class="cart-item__image-container gradient global-media-settings"><img src="//cdn.shopify.com/s/files/1/0743/0121/0913/files/tv.webp?v=1682399740&amp;width=300" class="cart-item__image" alt="" loading="lazy" width="150" height="150"></div></td>');
    const $cell2 = $('<td class="cart-item__details"><a href="/products/small-tv?variant=44979149275425" class="cart-item__name h4 break">small tv</a><div class="product-option">Rs. 0.00</div><dl></dl><p class="product-option"></p><ul class="discounts list-unstyled" role="list" aria-label="Discount"></ul></td>');
    const $cell3 = $('<td class="cart-item__totals right medium-hide large-up-hide"><div class="loading-overlay hidden"><div class="loading-overlay__spinner"><svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle></svg></div></div><div class="cart-item__price-wrapper"><span class="price price--end">Rs. 0.00</span></div></td>');
    const $cell4 = $('<td class="cart-item__quantity"></td>');
    const $cell5 = $('<td class="cart-item__totals right small-hide"><div class="loading-overlay hidden"><div class="loading-overlay__spinner"><svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle></svg></div></div><div class="cart-item__price-wrapper"><span class="price price--end">Rs. 0.00</span></div></td>');
      $newRow.append($cell1);
      $newRow.append($cell2);
      $newRow.append($cell3);
      $newRow.append($cell4);
      $newRow.append($cell5);
    table.append($newRow);
}
</script>